name: Backend CI - Static Analysis & Type Check

on:
  push:
    branches: [ 'develop', 'release/**' ]
    paths: [ 'backend/**' ]
  create:
    branches:
      - 'release/**'
  pull_request:
    branches: [ 'develop', 'release/**' ]
    paths: [ 'backend/**' ]

jobs:
  backend-ci:
    name: Run Static Analysis and Type Check
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. AWS 자격 증명 설정 (ECR Push용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 3. Java 21 설치
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 4. Checkstyle 실행
      - name: Run Checkstyle
        working-directory: ./backend
        run: ./gradlew checkstyleMain

      # 5. 빌드 테스트 (단위 테스트 및 Checkstyle 제외)
      - name: Build without Tests
        working-directory: ./backend
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
          JWT_SECRET_CODE: ${{ secrets.JWT_SECRET_CODE }}
          FE_BASE_URL: ${{ secrets.FE_BASE_URL }}
          BE_BASE_URL: ${{ secrets.BE_BASE_URL }}
          AI_BASE_URL: ${{ secrets.AI_BASE_URL }}
          EC2_PUBLIC_URL_1: ${{ secrets.EC2_PUBLIC_URL_1 }}
          EC2_PUBLIC_URL_2: ${{ secrets.EC2_PUBLIC_URL_2 }}
          EC2_PUBLIC_URL_3: ${{ secrets.EC2_PUBLIC_URL_3 }}
        run: ./gradlew build -x checkstyleMain -x checkstyleTest -x test

      # 6. 실패 시 Discord 알림 전송
      - name: Notify Discord on Failure
        if: failure()
        run: |
          echo "❌ CI 실패! Discord 알림 전송 중..."

          CHECKSTYLE_ERRORS=$(grep '<error ' backend/build/reports/checkstyle/*.xml 2>/dev/null | \
            sed -n 's/.*line="\([0-9]\+\)".*message="\([^"]\+\)".*/❌ Checkstyle: \2 (Line \1)/p' | head -n 5)

          GRADLE_ERRORS=$(find backend/build -name '*.log' -exec tail -n 200 {} \; 2>/dev/null | \
            grep -iE 'FAILURE|error|exception' | grep -v 'deprecated' | head -n 5)

          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          if [ -z "$BRANCH_NAME" ]; then
            BRANCH_NAME="${{ github.head_ref || github.base_ref }}"
          fi

          ERROR_MSG=""
          if [ -n "$CHECKSTYLE_ERRORS" ]; then
            ERROR_MSG="${ERROR_MSG}🔍 *Checkstyle 오류*:\n$CHECKSTYLE_ERRORS\n"
          fi

          if [ -n "$GRADLE_ERRORS" ]; then
            ERROR_MSG="${ERROR_MSG}🧪 *Gradle 빌드 실패*:\n$GRADLE_ERRORS\n"
          fi

          if [ -z "$ERROR_MSG" ]; then
            ERROR_MSG="❓ *구체적인 오류를 찾을 수 없습니다.*"
          fi

          ERROR_MSG=$(echo -e "$ERROR_MSG" | sed ':a;N;$!ba;s/\n/\\n/g')
          TITLE="🚨 *백엔드 CI 실패 알림* (브랜치: $BRANCH_NAME)"

          curl -X POST -H "Content-Type: application/json" \
            -d "{\"content\": \"$TITLE\\n$ERROR_MSG\\n👉 [자세한 로그 확인하기](https://github.com/100-hours-a-week/18-team-timeline-be/actions)\"}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      # 7. ✅ release 전용 Docker Build + ECR Push + Discord 성공 알림
      - name: Get short commit SHA
        id: meta
        run: echo "tag=$(echo $GITHUB_SHA | cut -c1-7)" >> "$GITHUB_OUTPUT"

      - name: Docker Build & Push to ECR
        if: startsWith(github.ref, 'refs/heads/release/')
        working-directory: ./backend
        env:
          AWS_REGION: ap-northeast-2
          ECR_REPO: 123456789012.dkr.ecr.ap-northeast-2.amazonaws.com/tamnara/be
        run: |
          TAG=${{ steps.meta.outputs.tag }}

          echo "🔐 ECR 로그인"
          aws ecr get-login-password \
            | docker login --username AWS --password-stdin $ECR_REPO

          echo "🐳 Docker 이미지 빌드 중... (태그: $TAG)"
          docker build \
            --build-arg DB_URL=${{ secrets.DB_URL }} \
            --build-arg DB_USERNAME=${{ secrets.DB_USERNAME }} \
            --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --build-arg KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} \
            --build-arg KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }} \
            --build-arg JWT_SECRET_CODE=${{ secrets.JWT_SECRET_CODE }} \
            --build-arg FE_BASE_URL=${{ secrets.FE_BASE_URL }} \
            --build-arg BE_BASE_URL=${{ secrets.BE_BASE_URL }} \
            --build-arg AI_BASE_URL=${{ secrets.AI_BASE_URL }} \
            --build-arg EC2_PUBLIC_URL_1=${{ secrets.EC2_PUBLIC_URL_1 }} \
            --build-arg EC2_PUBLIC_URL_2=${{ secrets.EC2_PUBLIC_URL_2 }} \
            --build-arg EC2_PUBLIC_URL_3=${{ secrets.EC2_PUBLIC_URL_3 }} \
            -t $ECR_REPO:$TAG .

          echo "🚀 ECR Push 중... ($ECR_REPO:$TAG)"
          docker push $ECR_REPO:$TAG

          echo "✅ Discord 알림 전송"
          curl -X POST -H "Content-Type: application/json" \
            -d "{\"content\": \"✅ *ECR Push 완료!*\\n📦 Repository: $ECR_REPO:$TAG\\n👉 [ECR에서 보기](https://ap-northeast-2.console.aws.amazon.com/ecr/repositories/tamnara/be?region=ap-northeast-2)\"}" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
