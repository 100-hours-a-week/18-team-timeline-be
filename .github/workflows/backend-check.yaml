name: Backend CI - Static Analysis, Build & Docker Push

on:
  push:
    branches: [ 'develop', 'release/**', 'main' ]
    paths: [ 'backend/**' ]

  pull_request:
    branches: [ 'develop', 'release/**' ]
    paths: [ 'backend/**' ]

  create:
    branches:
      - 'release/**'

jobs:
  backend-ci:
    name: Run Static Analysis and Type Check
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read
      checks: write
      pull-requests: write

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::346011888304:role/github-action-role
          aws-region: ap-northeast-2

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build without Tests
        working-directory: ./backend
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
          JWT_SECRET_CODE: ${{ secrets.JWT_SECRET_CODE }}
          FE_BASE_URL: ${{ secrets.FE_BASE_URL }}
          BE_BASE_URL: ${{ secrets.BE_BASE_URL }}
          AI_BASE_URL: ${{ secrets.AI_BASE_URL }}
          EC2_PUBLIC_URL_1: ${{ secrets.EC2_PUBLIC_URL_1 }}
          EC2_PUBLIC_URL_2: ${{ secrets.EC2_PUBLIC_URL_2 }}
          EC2_PUBLIC_URL_3: ${{ secrets.EC2_PUBLIC_URL_3 }}
        run: ./gradlew build -x checkstyleMain -x checkstyleTest -x test

      - name: Notify Discord on Failure
        if: failure()
        run: |
          CHECKSTYLE_ERRORS=$(grep '<error ' backend/build/reports/checkstyle/*.xml 2>/dev/null | \
            sed -n 's/.*line="\([0-9]\+\)".*message="\([^"]\+\)".*/‚ùå Checkstyle: \2 (Line \1)/p' | head -n 5)

          GRADLE_ERRORS=$(find backend/build -name '*.log' -exec tail -n 200 {} \; 2>/dev/null | \
            grep -iE 'FAILURE|error|exception' | grep -v 'deprecated' | head -n 5)

          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          if [ -z "$BRANCH_NAME" ]; then
            BRANCH_NAME="${{ github.head_ref || github.base_ref }}"
          fi

          ERROR_MSG=""
          if [ -n "$CHECKSTYLE_ERRORS" ]; then
            ERROR_MSG="${ERROR_MSG}üîç *Checkstyle Ïò§Î•ò*:\n$CHECKSTYLE_ERRORS\n"
          fi

          if [ -n "$GRADLE_ERRORS" ]; then
            ERROR_MSG="${ERROR_MSG}üß™ *Gradle ÎπåÎìú Ïã§Ìå®*:\n$GRADLE_ERRORS\n"
          fi

          if [ -z "$ERROR_MSG" ]; then
            ERROR_MSG="‚ùì *Íµ¨Ï≤¥Ï†ÅÏù∏ Ïò§Î•òÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.*"
          fi

          ERROR_MSG=$(echo -e "$ERROR_MSG" | sed ':a;N;$!ba;s/\n/\\n/g')
          TITLE="*Î∞±ÏóîÎìú CI Ïã§Ìå® ÏïåÎ¶º* (Î∏åÎûúÏπò: $BRANCH_NAME)"

          .github/scripts/discord_notify.sh failure "$TITLE" "$ERROR_MSG" "${{ secrets.DISCORD_WEBHOOK_URL }}"

  build-and-push:
    name: Docker Build & ECR Push (main only)
    needs: backend-ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::346011888304:role/github-action-role
          aws-region: ap-northeast-2

      - name: Get short commit SHA
        id: meta
        run: echo "tag=$(echo $GITHUB_SHA | cut -c1-7)" >> "$GITHUB_OUTPUT"

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        working-directory: ./backend
        env:
          TAG: ${{ steps.meta.outputs.tag }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
          JWT_SECRET_CODE: ${{ secrets.JWT_SECRET_CODE }}
          FE_BASE_URL: ${{ secrets.FE_BASE_URL }}
          BE_BASE_URL: ${{ secrets.BE_BASE_URL }}
          AI_BASE_URL: ${{ secrets.AI_BASE_URL }}
          EC2_PUBLIC_URL_1: ${{ secrets.EC2_PUBLIC_URL_1 }}
          EC2_PUBLIC_URL_2: ${{ secrets.EC2_PUBLIC_URL_2 }}
          EC2_PUBLIC_URL_3: ${{ secrets.EC2_PUBLIC_URL_3 }}
        run: |
          chmod +x ../scripts/build.sh
          ../scripts/build.sh 346011888304.dkr.ecr.ap-northeast-2.amazonaws.com/tamnara/be $TAG
          docker push 346011888304.dkr.ecr.ap-northeast-2.amazonaws.com/tamnara/be:$TAG
          docker tag 346011888304.dkr.ecr.ap-northeast-2.amazonaws.com/tamnara/be:$TAG 346011888304.dkr.ecr.ap-northeast-2.amazonaws.com/tamnara/be:latest
          docker push 346011888304.dkr.ecr.ap-northeast-2.amazonaws.com/tamnara/be:latest
üîß Î≥ÄÍ≤ΩÏ†ê ÏöîÏïΩ:

      - name: Notify Discord on Success (ECR Push)
        run: |
          TAG=${{ steps.meta.outputs.tag }}
          ECR_REPO=346011888304.dkr.ecr.ap-northeast-2.amazonaws.com/tamnara/be
          TITLE="*ECR Push ÏôÑÎ£å!*"
          MSG="üì¶ Repository: $ECR_REPO:$TAG\\nüëâ [ECR Î≥¥Í∏∞](https://ap-northeast-2.console.aws.amazon.com/ecr/repositories/tamnara/be?region=ap-northeast-2)"

          .github/scripts/discord_notify.sh success "$TITLE" "$MSG" "${{ secrets.DISCORD_WEBHOOK_URL }}"

      - name: Deploy to ECS (ÏûêÎèôÌôî ÌïµÏã¨)
        env:
          TAG: ${{ steps.meta.outputs.tag }}
        run: |
          FAMILY="docker-v1-backend-cluster"
          SERVICE="${FAMILY}-service"
          CONTAINER_NAME="docker-v1-backend"
          IMAGE="346011888304.dkr.ecr.ap-northeast-2.amazonaws.com/tamnara/be:$TAG"

          TASK=$(aws ecs describe-task-definition --task-definition $FAMILY)

          NEW_DEF=$(echo $TASK | jq '.taskDefinition |
            {
              family: .family,
              networkMode: .networkMode,
              executionRoleArn: .executionRoleArn,
              containerDefinitions: (.containerDefinitions | map(if .name == "'"$CONTAINER_NAME"'" then .image = "'"$IMAGE"'" else . end)),
              requiresCompatibilities: .requiresCompatibilities,
              cpu: .cpu,
              memory: .memory
            }')

          echo "$NEW_DEF" > new-task-def.json

          NEW_TASK_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            | jq -r '.taskDefinition.taskDefinitionArn')

          aws ecs update-service \
            --cluster $FAMILY \
            --service $SERVICE \
            --task-definition $NEW_TASK_ARN

      - name: Notify Discord on Success (ECS Î∞∞Ìè¨)
        run: |
          TAG=${{ steps.meta.outputs.tag }}
          ECR_REPO=346011888304.dkr.ecr.ap-northeast-2.amazonaws.com/tamnara/be
          TITLE="*ECR + ECS Î∞∞Ìè¨ ÏôÑÎ£å!*"
          MSG="üì¶ $ECR_REPO:$TAG\\nüëâ [ECR Î≥¥Í∏∞](https://ap-northeast-2.console.aws.amazon.com/ecr/repositories/tamnara/be?region=ap-northeast-2)"

          .github/scripts/discord_notify.sh success "$TITLE" "$MSG" "${{ secrets.DISCORD_WEBHOOK_URL }}"

