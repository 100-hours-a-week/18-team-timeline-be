name: Dev CI/CD - CI Test, Build, Push & Remote Deploy

on:
  push:
    branches: [ 'develop' ]

jobs:
  ci-check:
    name: Run Static Analysis and Type Check
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read
      checks: write
      pull-requests: write

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::346011888304:role/github-action-role
          aws-region: ap-northeast-2

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Gradle Build (No Tests)
        working-directory: ./backend
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
          JWT_SECRET_CODE: ${{ secrets.JWT_SECRET_CODE }}
          FE_BASE_URL: ${{ secrets.FE_BASE_URL }}
          BE_BASE_URL: ${{ secrets.BE_BASE_URL }}
          AI_BASE_URL: ${{ secrets.AI_BASE_URL }}
          EC2_PUBLIC_URL_1: ${{ secrets.EC2_PUBLIC_URL_1 }}
          EC2_PUBLIC_URL_2: ${{ secrets.EC2_PUBLIC_URL_2 }}
          EC2_PUBLIC_URL_3: ${{ secrets.EC2_PUBLIC_URL_3 }}
          OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
        run: ./gradlew build -x checkstyleMain -x checkstyleTest -x test

  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: ci-check
    outputs:
      tag: ${{ steps.meta.outputs.tag }}

    permissions:
      id-token: write
      contents: read
      checks: write
      pull-requests: write

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::346011888304:role/github-action-role
          aws-region: ap-northeast-2

      - name: Get short commit SHA
        id: meta
        run: echo "tag=$(echo $GITHUB_SHA | cut -c1-7)" >> "$GITHUB_OUTPUT"

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download OTEL Java Agent
        working-directory: ./backend
        run: |
          curl -Lo opentelemetry-javaagent.jar https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/download/v1.32.0/opentelemetry-javaagent.jar

      - name: Build and Push Docker Image
        working-directory: ./backend
        env:
          TAG: ${{ steps.meta.outputs.tag }}
          ECR_URI_DEV: ${{ secrets.ECR_URI_DEV }}
        run: |
          chmod +x ../scripts/build.sh
          ../scripts/build.sh $ECR_URI_DEV $TAG
          docker push $ECR_URI_DEV:$TAG
          docker tag $ECR_URI_DEV:$TAG $ECR_URI_DEV:latest
          docker push $ECR_URI_DEV:latest

      - name: Generate ECR Login Password
        id: ecr-password
        run: echo "ECR_PASSWORD=$(aws ecr get-login-password --region ap-northeast-2)" >> $GITHUB_ENV

  remote-deploy:
    name: SSH into Peered Instance and Deploy
    runs-on: ubuntu-latest
    needs: build-image

    env:
      TAG: ${{ needs.build-image.outputs.tag }}
      ECR_PASSWORD: ${{ env.ECR_PASSWORD }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Run dev-deploy.sh inside Docker container on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PEER_HOST }}
          username: ${{ secrets.PEER_USER }}
          key: ${{ secrets.PEER_SSH_KEY }}
          envs: TAG,BACKEND_EC2_IP,ECR_URI_DEV,ECR_PASSWORD
          script: |
            echo "🔄 컨테이너 실행 및 dev-deploy.sh 실행 시작"
            BACKEND_EC2_IP=${{ secrets.BACKEND_EC2_IP }}
            ECR_URI_DEV=${{ secrets.ECR_URI_DEV }}

            # ECR 로그인 (aws cli 불필요)
            echo $ECR_PASSWORD | docker login --username AWS --password-stdin $ECR_URI_DEV

            docker ps -q --filter "name=dev-backend" | grep -q . && docker stop dev-backend && docker rm dev-backend

            docker run -d --name dev-backend \
              -e BACKEND_EC2_IP=$BACKEND_EC2_IP \
              -e ECR_URI_DEV=$ECR_URI_DEV \
              $ECR_URI_DEV:latest

            docker exec dev-backend bash /app/dev-deploy.sh

  notify-failure:
    name: Notify Discord on Failure
    runs-on: ubuntu-latest
    if: failure()
    needs: [ci-check, build-image]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Notify Discord on CI Failure
        run: |
          CHECKSTYLE_ERRORS=$(grep '<error ' backend/build/reports/checkstyle/*.xml 2>/dev/null | sed -n 's/.*line="\([0-9]\+\)".*message="\([^"]\+\)".*/❌ Checkstyle: \2 (Line \1)/p' | head -n 5)
          GRADLE_ERRORS=$(find backend/build -name '*.log' -exec tail -n 200 {} \; 2>/dev/null | grep -iE 'FAILURE|error|exception' | grep -v 'deprecated' | head -n 5)
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          if [ -z "$BRANCH_NAME" ]; then BRANCH_NAME="${{ github.head_ref || github.base_ref }}"; fi
          ERROR_MSG=""
          if [ -n "$CHECKSTYLE_ERRORS" ]; then ERROR_MSG="${ERROR_MSG}🔍 *Checkstyle 오류*:\n$CHECKSTYLE_ERRORS\n"; fi
          if [ -n "$GRADLE_ERRORS" ]; then ERROR_MSG="${ERROR_MSG}🧪 *Gradle 빌드 실패*:\n$GRADLE_ERRORS\n"; fi
          if [ -z "$ERROR_MSG" ]; then ERROR_MSG="❓ *구체적인 오류를 찾을 수 없습니다.*"; fi
          ERROR_MSG=$(echo -e "$ERROR_MSG" | sed ':a;N;$!ba;s/\n/\\n/g')
          TITLE="*백엔드 CI 실패 알림* (브랜치: $BRANCH_NAME)"
          chmod +x .github/scripts/discord_notify.sh
          .github/scripts/discord_notify.sh failure "$TITLE" "$ERROR_MSG" "${{ secrets.DISCORD_WEBHOOK_URL }}"

  notify-success:
    name: Notify Discord on Success
    runs-on: ubuntu-latest
    if: success()
    needs: [ci-check, build-image]
    env:
      TAG: ${{ needs.build-image.outputs.tag }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Notify Discord on CI Success
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          if [ -z "$BRANCH_NAME" ]; then BRANCH_NAME="${{ github.head_ref || github.base_ref }}"; fi
          ECR_URI_DEV=${{ secrets.ECR_URI_DEV }}
          ECR_URL="https://ap-northeast-2.console.aws.amazon.com/ecr/repositories/private/${ECR_URI_DEV#*/}?region=ap-northeast-2"
          TITLE1="*DEV ECR Push 완료!*"
          MSG1="📦 Repository: \`${ECR_URI_DEV}:$TAG\`\n👉 [ECR 보기]($ECR_URL)"
          TITLE2="*DEV ECR + ECS 배포 완료!*"
          MSG2="📦 \`${ECR_URI_DEV}:$TAG\`\n👉 [ECR 보기]($ECR_URL)"
          chmod +x .github/scripts/discord_notify.sh
          .github/scripts/discord_notify.sh success "$TITLE1" "$MSG1" "${{ secrets.DISCORD_WEBHOOK_URL }}"
          sleep 1
          .github/scripts/discord_notify.sh success "$TITLE2" "$MSG2" "${{ secrets.DISCORD_WEBHOOK_URL }}"